

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://adamczapla.github.io/</id>
  <title>Adam Czapla</title>
  <subtitle>Deep dive into modern C++! Explore compile-time programming, metaprogramming, and advanced techniques to write efficient and maintainable C++ code.</subtitle>
  <updated>2025-04-04T16:36:05+02:00</updated>
  <author>
    <name>Adam Czapla</name>
    <uri>https://adamczapla.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://adamczapla.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://adamczapla.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator>
  <rights> © 2025 Adam Czapla </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>A Constexpr-Compatible Algorithm for std::tuple - Part 2: tuple_find</title>
    <link href="https://adamczapla.github.io/posts/implementing-tuple-find-a-constexpr-compatible-algorithm-for-heterogeneous-containers/" rel="alternate" type="text/html" title="A Constexpr-Compatible Algorithm for std::tuple - Part 2: tuple_find" />
    <published>2025-03-24T00:00:00+01:00</published>
  
    <updated>2025-04-04T15:48:22+02:00</updated>
  
    <id>https://adamczapla.github.io/posts/implementing-tuple-find-a-constexpr-compatible-algorithm-for-heterogeneous-containers/</id>
    <content type="text/html" src="https://adamczapla.github.io/posts/implementing-tuple-find-a-constexpr-compatible-algorithm-for-heterogeneous-containers/" />
    <author>
      <name>Adam Czapla</name>
    </author>

  
    
    <category term="Compile-time programming" />
    
    <category term="Algorithms for Heterogeneous Containers" />
    
  

  <summary>A detailed guide to implementing the constexpr-compatible search algorithm &amp;#39;tuple_find&amp;#39; for heterogeneous containers using modern C++.</summary>

  </entry>

  
  <entry>
    <title>Constexpr-Compatible Function for std::tuple - Part 1: tuple_for_each</title>
    <link href="https://adamczapla.github.io/posts/implementing-constexpr-compatible-algorithms-for-heterogeneous-containers-tuple-for-each/" rel="alternate" type="text/html" title="Constexpr-Compatible Function for std::tuple - Part 1: tuple_for_each" />
    <published>2025-02-26T00:00:00+01:00</published>
  
    <updated>2025-04-04T15:48:22+02:00</updated>
  
    <id>https://adamczapla.github.io/posts/implementing-constexpr-compatible-algorithms-for-heterogeneous-containers-tuple-for-each/</id>
    <content type="text/html" src="https://adamczapla.github.io/posts/implementing-constexpr-compatible-algorithms-for-heterogeneous-containers-tuple-for-each/" />
    <author>
      <name>Adam Czapla</name>
    </author>

  
    
    <category term="Compile-time programming" />
    
    <category term="Algorithms for Heterogeneous Containers" />
    
  

  <summary>A comprehensive guide to implementing the constexpr-compatible algorithm &amp;#39;tuple_for_each&amp;#39; for heterogeneous containers using modern C++.</summary>

  </entry>

  
  <entry>
    <title>NTTP Builder Strategy – constexpr Conversion of 'vector to array'</title>
    <link href="https://adamczapla.github.io/posts/nttp-compile-time-builder-strategy-constexpr-conversion-of-vector-to-array/" rel="alternate" type="text/html" title="NTTP Builder Strategy – constexpr Conversion of &amp;apos;vector to array&amp;apos;" />
    <published>2025-02-21T00:00:00+01:00</published>
  
    <updated>2025-04-04T15:48:22+02:00</updated>
  
    <id>https://adamczapla.github.io/posts/nttp-compile-time-builder-strategy-constexpr-conversion-of-vector-to-array/</id>
    <content type="text/html" src="https://adamczapla.github.io/posts/nttp-compile-time-builder-strategy-constexpr-conversion-of-vector-to-array/" />
    <author>
      <name>Adam Czapla</name>
    </author>

  
    
    <category term="C++" />
    
    <category term="Compile-time programming" />
    
  

  <summary>A deep dive into the &amp;#39;NTTP Compile-Time Builder Strategy&amp;#39; for constexpr conversion of &amp;#39;std::vector&amp;#39; to &amp;#39;std::array&amp;#39; in C++.</summary>

  </entry>

  
  <entry>
    <title>Staging Strategy (CTSS): constexpr Conversion of 'int to string_view'</title>
    <link href="https://adamczapla.github.io/posts/compile-time-staging-strategy-ctss-constexpr-conversion-of-int-to-string-view/" rel="alternate" type="text/html" title="Staging Strategy (CTSS): constexpr Conversion of &amp;apos;int to string_view&amp;apos;" />
    <published>2025-02-04T00:00:00+01:00</published>
  
    <updated>2025-04-04T15:48:22+02:00</updated>
  
    <id>https://adamczapla.github.io/posts/compile-time-staging-strategy-ctss-constexpr-conversion-of-int-to-string-view/</id>
    <content type="text/html" src="https://adamczapla.github.io/posts/compile-time-staging-strategy-ctss-constexpr-conversion-of-int-to-string-view/" />
    <author>
      <name>Adam Czapla</name>
    </author>

  
    
    <category term="C++" />
    
    <category term="Compile-time programming" />
    
  

  <summary>A detailed introduction to the Compile-Time Staging Strategy (CTSS) for converting an int to a std::string_view at compile time using C++20 and C++23.</summary>

  </entry>

  
  <entry>
    <title>Compile-Time Programming: New Possibilities with C++20 and C++23</title>
    <link href="https://adamczapla.github.io/posts/compile-time-programming-new-possibilities-with-cpp20-and-cpp23/" rel="alternate" type="text/html" title="Compile-Time Programming: New Possibilities with C++20 and C++23" />
    <published>2025-01-31T12:00:00+01:00</published>
  
    <updated>2025-01-31T12:00:00+01:00</updated>
  
    <id>https://adamczapla.github.io/posts/compile-time-programming-new-possibilities-with-cpp20-and-cpp23/</id>
    <content type="text/html" src="https://adamczapla.github.io/posts/compile-time-programming-new-possibilities-with-cpp20-and-cpp23/" />
    <author>
      <name>Adam Czapla</name>
    </author>

  
    
    <category term="C++" />
    
    <category term="Compile-time programming" />
    
  

  <summary>A deep dive into compile-time programming in C++20 and C++23, focusing on efficient &amp;#39;std::string&amp;#39; to &amp;#39;std::string_view&amp;#39; conversion.</summary>

  </entry>

</feed>


